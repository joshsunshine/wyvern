tagged type Window
	def draw():Str

type WindowMod
	tagged class Win [case of Window]
		class def make():Win = new
		def draw():Str = "" 

val basicWindow:WindowMod = new
	tagged class Win [case of Window]
		class def make():Win = new
		def draw():Str = "blank window"

def makeBordered(wm: WindowMod):WindowMod = new
	tagged class Win [case of wm.Win]
		class def make():Win = new
		def draw():Str = "bordered window"

def makeScrollable(wm: WindowMod):WindowMod = new
	tagged class Win [case of wm.Win]
		class def make():Win = new
		def draw():Str = "scrollable window"

def userWantsBorder():Bool = true

val winMod:WindowMod =
	if (userWantsBorder())
	then
		makeBordered(basicWindow)
	else
		basicWindow

val sWinMod:WindowMod = makeScrollable(winMod)
val bWinMod:WindowMod = makeBordered(winMod)
val sWin = sWinMod.Win.make()
val bWin = bWinMod.Win.make()
val win = winMod.Win.make()

match(bWin):
	sWinMod.Win => "scrollable"
	bWinMod.Win => "bordered"
	default => "default"

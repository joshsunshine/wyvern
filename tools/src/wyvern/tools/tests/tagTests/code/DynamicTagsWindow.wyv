tagged type Window
	def draw():Unit

type WindowMod
	tagged class Win [case of Window]
		class def make():Win
		def draw():Unit

val basicWindow:WindowMod = new
	tagged class Win [case of Window]
		class def make():Win = new
		def draw():Str = "blank window"

def makeBordered(wm: WindowMod):WindowMod = new
	tagged class Win [case of wm.Win]
		class def make():Win = new
		def draw():Str = "bordered window"

def makeScrollable(wm: WindowMod):WindowMod = new
	tagged class Win [case of wm.Win]
		class def make():Win = new
		def draw():Str = "scrollable window"

def userWantsBorder():Bool = true

val winMod:WindowMod =
	if (userWantsBorder())
	then
		makeBordered(basicWindow)
	else
		basicWindow

val bigWinMod:WindowMod = makeScrollable(winMod)
val smallWin:Win = winMod.Win.make()
val bigWin:Win = bigWinMod.Win.make()

// returns "big"
match(bigWin):
	bigWinMod.Win => "big"
	default => "small"
